6. Идея, метод, алгоритм решение Задачи

С помощью стандартного приложения "Терминал" будем осуществлять непосредственную обработку файлов, а именно выводить подробные сведения насчет кодировки используемых файлов, их
содержимое и так далее. Также стоит отметить использование конвейеров. Многие команды уже
использовались раннее в ЛР №1, тем самым можно будет повторить их.
7. Сценарий выполнения работы 

Для начала перейдем в директорию лабораторных работ при помощи команды "cd", затем, используя команду "touch", создадим 2 файла для работы: "file 1.txt", "file 2.txt".
Запишем разные сообщения в эти два файла при помощи команды "echo", используя команду "cat",
выведем их содержимое после завершения выполнения предыдущей команды.
При помощи команды "cmp" сравним эти два файла по-байтово, а при помощи ключа "b" можно
посмотреть, какой байт отличается Выполнив команду "diff", можно сравнить эти два текстовых файла,
выяснить, чем они различаются
Далее, используя конвейер "history | tail -n"(n - число команд), можно вывести последние n команд в
истории. Благодаря конвейеру, данное применение является эффективным, так как в противном случае,
возможно, нам бы пришлось создавать некоторый текстовый файл, куда направится вывод команды
"history", и как раз последующее применение команды "tail -n" показало бы последние n строк.
Используя команду "join", можно объединить содержимое нескольких файлов в один. Чтобы было
проще работать с содержимым файлов, можно воспользоваться текстовым редактором "nano", иногда
это значительно ускоряет работу. Прописав команду "wc", можно подсчитать количество строк, слов,
символов в файле. Благодаря команде "comm", можно сравнить два файла построчно и вывести
строки, являющиеся различными между этими файлами. Используя комманду "iconv", можно изменить
кодировку конкретного файла. Например, это может понадобится при работе в других приложениях или
на других ОС. Используя инструмент "gzip", можно уменьшить размер файлов. Например, если нам не
будет хватать места на жестком диске, то данная команда может быть полезной. "tar" — это утилита
командной строки, которая позволяет извлекать, создавать и манипулировать архивами. Команда "sum"
вычисляет некоторую контрольную сумму, благодаря таким отслеживаниям, можно заметить изменения
в файле. Для того чтобы вычислить размер файла на диске, можно воспользоваться командой "du".
Прописав команду "git add -A", мы позволяем системе контроля версий начать отслеживание всех файлов
в данной директории. Команда "git commit -m"text"" позволяет создать комментарий к версии продукта,
которую мы хотим сохранить. Для загрузки проекта с комментариями на сервис GitHub необходимо
воспользоваться командой "git push -u origin main". Если нам необходимо просмотреть изменения в
проекте прямо в терминале, то стоит воспользоваться командой "git status".
Например, нам нужно зафиксировать различия между двумя файлами и обновить содержимое одного
из них, для этого можно воспользоваться следующей комбинацией: "diff -u file new1.txt file new2.txt >
patch new.patch" , "patch file new1.txt -i patch new.patch -o file new1 new.txt". В ходе выполнения операций
создасться файл с новым содержимым.
Допустим есть текстовый файл, состоящий из 3 колонок, нам необходимо вывести n-ую колонку ,k -
строк, содержащих конкретное слово или символ. В таком случае следует воспользоваться следующим
конвейером: awk ’print $n’ file.txt | head -k | grep word. Тем самым можно сказать, что при использовании
"awk" вы можете выбирать данные – один или более отдельных фрагментов текста – на основе заданного
критерия. Например, с помощью "awk" можно выполнять поиск конкретного слова или шаблона во
фрагменте текста, а также выбирать определённую строку/столбец в файле

Вывод:

Владения командами bash является немало важным навыком во всех направления программирования, начиная от баз данных и заканчивая Full-stack разработкой. Грамотное владение функционалом
терминала позволяет существенно сократить затраты времени на выполнение некоторых процедур, например создание файла, илиже фиксирование изменений в проекте при помощи системыконтроля версий(если
ей не пользоваться, то пришлось бы создавать много папок с некоторыми одинаковыми файлами, что
затрудняет процесс работы). Тем самым можно сказать, что незнание bash влечет скованность в некоторых
последующих действиях будь это институт, школа или работа. Освоив некоторые азы bash, я могу
работать с файлами более быстрым и удобным способом, чем я бы делал это вручную. Стоит отметить,
что помимо nano существует и более удобные редакторы, такие как vim, можно поставить плагины и
работать как с полноценным IDEA, но лично я бы никогда таким не занимался, так как существуют более
удобные редакторы, VSCode например. Также у bash существует его графическая оболочка - mc(midnignt
commander), благодаря ему можно еще удобнее работать в нужных директориях и обрабатывать файлы,
но разработчики не всегда используюю mc, думаю проще остаться в обычном терминале, меньше затрат
по времени
